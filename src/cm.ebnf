<program> = { <global-declaration> | <function-definition>} ;

<function-definition> =
( "void" | "int" | "double" | "bool" ) <identifier> "(" [ <parameter-list> ] ")" "{" { <statement> } "}"

<parameter-list> = <constant-declaration-specifier> <identifier> { "," <constant-declaration-specifier> <identifier> }

<statement> = <declaration>
| <compound-statement>
| <assignment-statement>
| <selection-statement>
| <iteration-statement>
| <jump-statement>
| <read-statement>
| <write-statement> ;

<global-declaration> =
<constant-declaration-specifier> <identifier> [ "=" <constant> ] { "," <identifier> [ "=" <constant> ] } ";" ;

<constant-declaration-specifier> = ( "int" | "double" | "bool" ) { "[" <integer-constant> "]" }

<declaration> = <declaration-specifier> <initializer> { "," <initializer> } ";" ;

<initializer> = <identifier> [ "=" <expression> ] ;

<declaration-specifier> = ( "int" | "double" | "bool" ) { "[" <additive-expression> "]" } ;

<compound-statement> = "{" { <statement> } "}" ;

<assignment-statement> = <left-value-expression> <assignment-operator> <expression> ;

<assignment-operator> = "=" | "*=" | "/=" | "%=" | "+=" | "-=";

<selection-statement> = "if" "(" <expression> ")" <statement> [ "else" <statement> ]

<iteration-statement> = "while" "(" <expression> ")" <statement>

<jump-statement> = "continue" ";"
| "break" ";"
| "return" [ <expression> ] ";"

<read-statement> = "read" "(" <left-value-expression> ")"

<write-statement> = "write" "(" <expression> ")"


(* expression *)

<expression> = <logical-OR-expression> ;

<logical-OR-expression> = <logical-AND-expression>
| <logical-OR-expression> "||" <logical-AND-expression> ;

<logical-AND-expression> = <equality-expression>
| <logical-AND-expression> "&&" <equality-expression> ;

<equality-expression> = <relational-expression>
| <equality-expression> "==" <relational-expression>
| <equality-expression> "!=" <relational-expression> ;

<relational-expression> = <additive-expression>
| <relational-expression> "<" <additive-expression>
| <relational-expression> ">" <additive-expression>
| <relational-expression> ">=" <additive-expression>
| <relational-expression> "<=" <additive-expression> ;

<additive-expression> = <multiplicative-expression>
| <additive-expression> "+" <multiplicative-expression>
| <additive-expression> "-" <multiplicatvie-expression> ;

<multiplicatvie-expression> = <unary-expression>
| <multiplicative-expression> "*" <unary-expression>
| <multiplicative-expression> "/" <unary-expression>
| <multiplicative-expression> "%" <unary-expression> ;

<unary-expression> = [ <unary-operator> ] <primary-expression> ;

<unary-operator> = "-" | "!" ;

<primary-expression> = <left-value-expression>
| <function-invokation>
| <constant>
| "(" <expression> ")" ;

<left-value-expression> = <identifier> { "[" <additive-expression> "]" }

<function-invokation> = <identifier> "(" { <expression> } ")"

<constant> = <integer-constant>
| <floating-constant>
| <boolean-constant> ;
